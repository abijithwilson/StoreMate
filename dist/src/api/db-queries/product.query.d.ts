import { CsvProductDto } from '../dto/product.dto';
export declare const deleteProductQuery = "\nWITH deleteSKU AS (\n    delete from m_sku_table\n    where product_id = $1\n)\nUPDATE m_product SET is_deleted=true WHERE\n    id = $1 returning id\n";
export declare const createProductSku: (values: any) => string;
export declare const updateProductSku: (values: any) => string;
export declare const fetchSingleProductSkuDetailsQuery = "SELECT \nm_product.id AS product_id,\nm_product.product_name AS name,\nc.name AS category,\nm_product.category_id,\nm_product.description,\nCOALESCE(json_agg(jsonb_build_object(\n'image',ms.image,\n'colour_id',ms.colour_id,\n'colour',clr.name,\n'colour_code',clr.colour_code,\n'default',ms.default_product,\n'size',s.name,\n'size_id',ms.size_id,\n'sku_id',ms.id,\n'sku_unique_id',ms.sku_unique_id,\n'barcode',ms.barcode,\n'price',ms.base_price,\n'discount_percent',ms.sale_price_discount_percent,\n'availability',case when exists(select id from m_sku_table ms\n         where ms.product_id = $1) \n         then true else false end)\nORDER BY ms.updated_at), '[]')AS skus\nFROM m_product\nLEFT JOIN m_category c\nON m_product.category_id = c.id\nLEFT JOIN m_sku_table ms\nON m_product.id = ms.product_id\nLEFT JOIN m_colour clr\nON ms.colour_id = clr.id\nLEFT JOIN m_size s\nON ms.size_id = s.id\nWHERE m_product.is_deleted = false\nAND m_product.id = $1";
export declare const listAllProductsQuery = "select m_product.id,\nm_product.product_name,\nm_category.id AS category_id,\nm_category.name AS category_name,\nm_sku_table.base_price AS price,\nm_sku_table.sale_price_discount_percent,\nm_sku_table.image,\nm_sku_table.sku_unique_id,\nm_product.updated_by,\ncount(*) over()\nFROM m_product\nLEFT JOIN m_sku_table ON m_product.id = m_sku_table.product_id\nLEFT JOIN m_category ON m_product.category_id = m_category.id\nWHERE m_product.is_deleted = false \nAND m_sku_table.default_product = true\nAND ($1::text is null or product_name LIKE $1 )    \nAND ($2::text is null or CAST(m_product.id AS TEXT) LIKE $2)      \nAND ($3::text is null or m_category.name LIKE $3)";
export declare const fetchProductOffersQuery: (sortField: any, sortOrder: any, limit: any, offset: any) => string;
export declare const fetchStoreWiseProductSkusQuery = "\nselect \nm_product.id AS product_id,\nm_product.product_name AS name,\nc.name AS category,\nm_product.category_id,\nm_product.description,\nCOALESCE(json_agg(jsonb_build_object(\n'image',ms.image,\n'colour_id',ms.colour_id,\n'colour',clr.name,\n'colour_code',clr.colour_code,\n'default',ms.default_product,\n'size',s.name,\n'size_id',ms.size_id,\n'sku_id',ms.id,\n'sku_unique_id',ms.sku_unique_id,\n'barcode',ms.barcode,\n'price',ms.base_price,\n'discount_percent',ms.sale_price_discount_percent,\n'availability',case when exists(select id from t_section_product_map tspm\n         where tspm.store_id = $1 and tspm.sku_id = ms.id\n         and m_product.id = $2) \n         then true else false end)\norder by ms.updated_at), '[]')AS skus\nfrom m_product\nleft join m_category c\non m_product.category_id = c.id\nleft join m_sku_table ms\non m_product.id = ms.product_id\nleft join m_colour clr\non ms.colour_id = clr.id\nleft join m_size s\non ms.size_id = s.id\nwhere m_product.id = $2\nand m_product.is_deleted = false\nand ($3::integer is null or ms.colour_id = $3)\nand ($4::integer is null or ms.size_id = $4)\ngroup by m_product.id,c.name";
export declare const bulkProductUploadQuery: (file: CsvProductDto, id: any) => any[];
export declare const fetchProductWiseOffersQuery: (sortField: any, sortOrder: any, limit: any, offset: any) => string;
export declare const skuFetchQuery: (productListSet: any) => string;
export declare const skuUpdateQuery: (idList: any) => string;
