export declare const listStoreWiseSectionsQuery = "with fetchCategories as(\n  select\n  tssm.section_id,\n  COALESCE(json_agg(distinct jsonb_build_object(\n                  'categoryId',mc.id,\n                  'categoryName',mc.\"name\",\n                  'image',mc.image\n              )), '[]')AS categories\n  from t_section_product_map tspm \n  left join m_product mp \n  on tspm.product_id = mp.id \n  left join m_category mc \n  on mp.category_id = mc.id \n  left join t_store_section_map tssm \n  on tspm.section_id = tssm.section_id \n  and tspm.store_id = tssm.store_id \n  where tspm.store_id = $1\n  group by tssm.section_id \n  )\n  SELECT\n  ms.section_name,\n  tssm.section_id,\n  count(distinct beacon_id) AS no_of_beacons,\n  (select categories from fetchCategories fc \n    where tssm.section_id = fc.section_id),\n  count(*) over()\n  FROM t_store_section_map tssm \n  LEFT JOIN m_section ms \n  ON tssm.section_id = ms.section_id \n  LEFT JOIN m_beacon b\n  ON tssm.section_id = b.section_id\n  and tssm.store_id = b.store_id \n  left join fetchCategories fc on \n  tssm.section_id = fc.section_id \n  WHERE tssm.store_id = $1\n  AND ms.is_deleted = false\n  group by tssm.section_id, ms.section_name, ms.updated_at\n  ORDER BY ms.updated_at DESC";
export declare const assignSectionQuery: (section_id: any) => string;
export declare const sectionWiseProductUnassignQuery = "\nupdate t_section_product_map \nset section_id = NULL\nwhere store_id = $1\nand section_id = $2\nand product_id = $3 returning id\n";
export declare const assignProductSection: (productId: any) => string;
export declare const fetchDetailsOfAProductInASection = "SELECT \nmp.id AS product_id,\nmp.product_name AS name,\nc.name AS category,\nmp.category_id,\nmp.description,\ncase when exists(select id from t_wishlist_user twu\n  where twu.section_id = $1 and twu.product_id = mp.id \n  and twu.store_id = $3 and twu.user_id = $4) \n  then true else false end as wishlist_status,\nCOALESCE(json_agg(jsonb_build_object(\n'image',ms.image,\n'colour_id',ms.colour_id,\n'colour',clr.name,\n'colour_code',clr.colour_code,\n'default',ms.default_product,\n'size',s.name,\n'size_id',ms.size_id,\n'barcode',ms.barcode,\n'price',ms.base_price,\n'discount_percent',ms.sale_price_discount_percent)\nORDER BY ms.updated_at), '[]')AS skus\nFROM t_section_product_map tspm\nleft join m_product mp\non tspm.product_id = mp.id\nLEFT JOIN m_category c\nON mp.category_id = c.id\nLEFT JOIN m_sku_table ms\nON tspm.sku_id = ms.id\nLEFT JOIN m_colour clr\nON ms.colour_id = clr.id\nLEFT JOIN m_size s\nON ms.size_id = s.id\nwhere tspm.section_id=$1\nAND mp.id = $2  AND tspm.store_id = $3";
export declare const sectionUnderStoreDropdownQuery = "\nselect \ntssm.section_id ,\nms.section_name \nfrom t_store_section_map tssm \nleft join m_section ms ON \ntssm .section_id = ms.section_id\nwhere ms.is_deleted =false and \ntssm.store_id =$1 and \n($2::text is null or UPPER(ms.section_name) LIKE UPPER ($2))\n";
export declare const getSectionAndSectionNotListedInStoreQuery: (limit: any, offset: any, sortField: any, sortOrder: any) => string;
export declare const ProductsNotAssignedToAnySection = "\nSELECT mp.id, mp.product_name, mp.category_id, \nmc.name AS category_name, msk.image, msk.base_price,\nmsk.sale_price_discount_percent\nFROM t_section_product_map tspm\nLEFT JOIN m_product mp\nON tspm.product_id = mp.id\nLEFT JOIN m_category mc\nON mp.category_id = mc.id\nLEFT JOIN m_sku_table msk\nON mp.id = msk.product_id\nWHERE msk.default_product = true\nand mp.is_deleted = false and \ntspm.store_id = $1 and tspm.section_id is null\ngroup by mp.id,mc.name,msk.image, msk.base_price,\nmsk.sale_price_discount_percent\norder by mp.updated_at DESC ";
export declare const unAssignSection = "\nwith unassignSectionFromProduct as(\n    Update t_section_product_map   \n      set section_id = null where \n      store_id =$1 and section_id =$2\n   ),\n   unassignSectionFromBeacon as(\n    Update m_beacon   \n      set section_id = null where \n      store_id =$1 and section_id =$2\n   )\n   Delete from t_store_section_map tssm  \n   where tssm.store_id =$1 and tssm.section_id =$2\n   returning tssm.id\n";
export declare const fetchSectionWiseCategoryListQuery: (limit: any, offset: any) => string;
export declare const fetchSectionWiseOfferListQuery: (limit: any, offset: any) => string;
export declare const fetchWishlistProductsQuery: (filterCategory: string, filterColour: string, fiterSize: string) => {
    query: string;
    dataValue: any[];
};
export declare const unAssignProductFromWishlistQuery = "delete from t_wishlist_user twu\nwhere twu.user_id = $1 and twu.store_id = $2\nand twu.product_id = $3\nreturning twu.id ";
export declare const fetchProductFiltersQuery: (filterCategory: any, wishlist: any) => {
    query: string;
    dataValue: any[];
};
export declare const fetchProductDefaults = "select array(\n  select distinct twu.product_id\n  from t_wishlist_user twu \n  where twu.store_id = $1 \n  and twu.section_id = $2\n  and twu.user_id = $3\n  ) as product_id";
export declare const fetchSectionVisitsQuery: (limit: any, offset: any) => string;
